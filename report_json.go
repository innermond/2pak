// Code generated by "json_snake_case -type=Report"; DO NOT EDIT

package packong

import "encoding/json"

type ReportJSON struct {
	WiningStrategyName string  `json:"wining_strategy_name"`
	BoxesArea          float64 `json:"boxes_area"`
	UsedArea           float64 `json:"used_area"`
	VendoredArea       float64 `json:"vendored_area"`
	VendoredLength     float64 `json:"vendored_length"`
	VendoredWidth      float64 `json:"vendored_width"`
	LostArea           float64 `json:"lost_area"`
	ProcentArea        float64 `json:"procent_area"`
	BoxesPerim         float64 `json:"boxes_perim"`
	Price              float64 `json:"price"`
	UnfitLen           int     `json:"unfit_len"`
	UnfitCode          string  `json:"unfit_code"`
	FitCode            string  `json:"fit_code"`
	NumSheetUsed       float64 `json:"num_sheet_used"`
}

func (m Report) MarshalJSON() ([]byte, error) {
	j := NewReportJSON(&m)
	return json.Marshal(j)
}

func NewReportJSON(m *Report) *ReportJSON {
	return &ReportJSON{
		WiningStrategyName: m.WiningStrategyName,
		BoxesArea:          m.BoxesArea,
		UsedArea:           m.UsedArea,
		VendoredArea:       m.VendoredArea,
		VendoredLength:     m.VendoredLength,
		VendoredWidth:      m.VendoredWidth,
		LostArea:           m.LostArea,
		ProcentArea:        m.ProcentArea,
		BoxesPerim:         m.BoxesPerim,
		Price:              m.Price,
		UnfitLen:           m.UnfitLen,
		UnfitCode:          m.UnfitCode,
		FitCode:            m.FitCode,
		NumSheetUsed:       m.NumSheetUsed,
	}
}
